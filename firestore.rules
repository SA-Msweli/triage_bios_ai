rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Enhanced helper functions for comprehensive access control
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function hasRole(role) {
      return isAuthenticated() && 
             request.auth.token.role == role;
    }
    
    function hasAnyRole(roles) {
      return isAuthenticated() && 
             request.auth.token.role in roles;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && 
             request.auth.uid == userId;
    }
    
    function isHospitalAdmin(hospitalId) {
      return isAuthenticated() && 
             request.auth.token.role == 'hospital_admin' &&
             request.auth.token.hospitalId == hospitalId;
    }

    // Enhanced security functions for HIPAA compliance
    function hasPatientConsent(patientId, dataScopes) {
      return isAuthenticated() && (
        // Patient can always access their own data
        request.auth.uid == patientId ||
        // Healthcare providers with valid consent
        (hasAnyRole(['healthcare_provider', 'admin']) && 
         exists(/databases/$(database)/documents/patient_consents/$(patientId + '_' + request.auth.uid)) &&
         get(/databases/$(database)/documents/patient_consents/$(patientId + '_' + request.auth.uid)).data.isActive == true &&
         get(/databases/$(database)/documents/patient_consents/$(patientId + '_' + request.auth.uid)).data.expiresAt > request.time) ||
        // Emergency access for critical situations
        (hasAnyRole(['emergency_responder', 'healthcare_provider']) && 
         request.auth.token.emergency_access == true)
      );
    }

    function isDataAccessAuthorized(resourceType, action, patientId) {
      return isAuthenticated() && (
        // Admin has full access
        hasRole('admin') ||
        // Patient accessing own data
        (resourceType == 'patient_data' && request.auth.uid == patientId) ||
        // Healthcare provider with proper authorization
        (hasRole('healthcare_provider') && 
         action in ['read', 'write'] && 
         hasPatientConsent(patientId, [resourceType])) ||
        // Caregiver with limited read access
        (hasRole('caregiver') && 
         action == 'read' && 
         hasPatientConsent(patientId, ['basic_info']))
      );
    }

    function isMinimumNecessaryCompliant(requestedFields, purpose) {
      // Define minimum necessary fields for different purposes
      let treatmentFields = ['vitals', 'symptoms', 'medical_history', 'allergies'];
      let paymentFields = ['insurance_info', 'billing_address', 'demographics'];
      let operationsFields = ['demographics', 'visit_summary'];
      let emergencyFields = ['vitals', 'allergies', 'emergency_contacts', 'medical_history'];
      
      return (
        (purpose == 'treatment' && requestedFields.hasAll(treatmentFields) == false) ||
        (purpose == 'payment' && requestedFields.hasAll(paymentFields) == false) ||
        (purpose == 'operations' && requestedFields.hasAll(operationsFields) == false) ||
        (purpose == 'emergency' && requestedFields.hasAll(emergencyFields) == false)
      );
    }

    function logDataAccess(resourceId, resourceType, action) {
      // This would trigger a Cloud Function to log the access
      return true; // Always allow logging
    }

    function isWithinBusinessHours() {
      // Check if access is during business hours (additional security layer)
      let hour = request.time.toMillis() / 1000 / 60 / 60 % 24;
      return hour >= 6 && hour <= 22; // 6 AM to 10 PM
    }

    function hasValidSession() {
      return isAuthenticated() && 
             request.auth.token.session_valid == true &&
             request.auth.token.exp > request.time.toMillis() / 1000;
    }

    // Hospitals Collection - Public read, admin write
    match /hospitals/{hospitalId} {
      allow read: if true; // Public read for hospital discovery
      allow write: if hasAnyRole(['admin', 'hospital_admin']);
      allow create: if hasRole('admin');
      allow delete: if hasRole('admin');
    }

    // Hospital Capacity Collection - Public read, hospital/admin write
    match /hospital_capacity/{capacityId} {
      allow read: if true; // Public read for capacity monitoring
      allow write: if hasAnyRole(['admin', 'hospital_admin']) ||
                      isHospitalAdmin(resource.data.hospitalId);
      allow create: if hasAnyRole(['admin', 'hospital_admin']);
      allow delete: if hasRole('admin');
    }

    // Patient Vitals Collection - Enhanced HIPAA-compliant access control
    match /patient_vitals/{vitalId} {
      allow read: if hasValidSession() && 
                     isDataAccessAuthorized('patient_vitals', 'read', resource.data.patientId) &&
                     logDataAccess(vitalId, 'patient_vitals', 'read');
      allow write: if hasValidSession() && 
                      isDataAccessAuthorized('patient_vitals', 'write', resource.data.patientId) &&
                      logDataAccess(vitalId, 'patient_vitals', 'write');
      allow create: if hasValidSession() && 
                       isDataAccessAuthorized('patient_vitals', 'create', request.resource.data.patientId) &&
                       logDataAccess(vitalId, 'patient_vitals', 'create');
      allow delete: if hasRole('admin') && 
                       logDataAccess(vitalId, 'patient_vitals', 'delete');
    }

    // Triage Results Collection - Enhanced healthcare provider access with audit logging
    match /triage_results/{resultId} {
      allow read: if hasValidSession() && 
                     isDataAccessAuthorized('triage_results', 'read', resource.data.patientId) &&
                     logDataAccess(resultId, 'triage_results', 'read');
      allow write: if hasValidSession() && 
                      hasAnyRole(['healthcare_provider', 'admin']) &&
                      isDataAccessAuthorized('triage_results', 'write', resource.data.patientId) &&
                      logDataAccess(resultId, 'triage_results', 'write');
      allow create: if hasValidSession() && 
                       hasAnyRole(['healthcare_provider', 'admin', 'patient']) &&
                       isDataAccessAuthorized('triage_results', 'create', request.resource.data.patientId) &&
                       logDataAccess(resultId, 'triage_results', 'create');
      allow delete: if hasRole('admin') && 
                       logDataAccess(resultId, 'triage_results', 'delete');
    }

    // Patient Consents Collection - Enhanced consent management with audit trail
    match /patient_consents/{consentId} {
      allow read: if hasValidSession() && (
                     isOwner(resource.data.patientId) ||
                     isOwner(resource.data.providerId) ||
                     hasRole('admin')
                  ) && logDataAccess(consentId, 'patient_consents', 'read');
      allow write: if hasValidSession() && (
                      isOwner(resource.data.patientId) ||
                      hasRole('admin')
                   ) && logDataAccess(consentId, 'patient_consents', 'write');
      allow create: if hasValidSession() && (
                       isOwner(request.resource.data.patientId) ||
                       hasRole('admin')
                    ) && logDataAccess(consentId, 'patient_consents', 'create');
      allow delete: if hasRole('admin') && 
                       logDataAccess(consentId, 'patient_consents', 'delete');
    }

    // Device Data Collection - User and healthcare provider access
    match /device_data/{deviceId} {
      allow read: if isOwner(resource.data.userId) ||
                     hasAnyRole(['healthcare_provider', 'admin']);
      allow write: if isOwner(resource.data.userId) ||
                      hasAnyRole(['healthcare_provider', 'admin']);
      allow create: if isOwner(request.resource.data.userId) ||
                       hasAnyRole(['healthcare_provider', 'admin']);
      allow delete: if hasRole('admin');
    }

    // Audit Logs Collection - Enhanced audit trail protection
    match /audit_logs/{logId} {
      allow read: if hasRole('admin') || 
                     (hasRole('healthcare_provider') && 
                      resource.data.userId == request.auth.uid);
      allow write: if false; // Audit logs should never be modified
      allow create: if hasValidSession() && 
                       hasAnyRole(['admin', 'healthcare_provider', 'hospital_admin', 'system']);
      allow delete: if false; // Audit logs should never be deleted
    }

    // HIPAA Compliance Collection - Admin and compliance officer access
    match /hipaa_compliance/{complianceId} {
      allow read: if hasAnyRole(['admin', 'compliance_officer']);
      allow write: if hasAnyRole(['admin', 'compliance_officer']);
      allow create: if hasAnyRole(['admin', 'compliance_officer', 'system']);
      allow delete: if hasRole('admin');
    }

    // Security Events Collection - Security team access
    match /security_events/{eventId} {
      allow read: if hasAnyRole(['admin', 'security_officer']);
      allow write: if hasAnyRole(['admin', 'security_officer']);
      allow create: if hasAnyRole(['admin', 'security_officer', 'system']);
      allow delete: if hasRole('admin');
    }

    // Data Encryption Metadata Collection - System access only
    match /encryption_metadata/{metadataId} {
      allow read: if hasAnyRole(['admin', 'system']);
      allow write: if hasAnyRole(['admin', 'system']);
      allow create: if hasAnyRole(['admin', 'system']);
      allow delete: if hasRole('admin');
    }

    // User Profiles Collection - User and admin access
    match /users/{userId} {
      allow read: if isOwner(userId) ||
                     hasAnyRole(['admin', 'healthcare_provider']);
      allow write: if isOwner(userId) ||
                      hasRole('admin');
      allow create: if isOwner(userId) ||
                       hasRole('admin');
      allow delete: if hasRole('admin');
    }

    // Emergency Access Override - For critical situations
    match /emergency_access/{accessId} {
      allow read: if hasAnyRole(['healthcare_provider', 'admin', 'emergency_responder']);
      allow write: if hasAnyRole(['healthcare_provider', 'admin', 'emergency_responder']);
      allow create: if hasAnyRole(['healthcare_provider', 'admin', 'emergency_responder']);
      allow delete: if hasRole('admin');
    }

    // System Configuration - Admin only
    match /system_config/{configId} {
      allow read: if hasRole('admin');
      allow write: if hasRole('admin');
      allow create: if hasRole('admin');
      allow delete: if hasRole('admin');
    }

    // Default deny rule for any other collections
    match /{document=**} {
      allow read, write: if false;
    }
  }
}