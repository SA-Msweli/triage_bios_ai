import '../shared/services/firestore_data_service.dart';
import '../shared/models/firestore/patient_vitals_firestore.dart';
import '../shared/models/firestore/triage_result_firestore.dart';
import '../shared/models/firestore/patient_consent_firestore.dart';

/// Example demonstrating the new patient data persistence functionality
/// implemented in Task 5: Patient Data Persistence
class PatientDataPersistenceExample {
  final FirestoreDataService _firestoreService = FirestoreDataService();

  /// Example 1: Store patient vitals with device integration and data quality tracking
  Future<void> storePatientVitalsWithDeviceExample() async {
    print('=== Example 1: Store Patient Vitals with Device Integration ===');

    // Create sample patient vitals
    final vitals = PatientVitalsFirestore(
      id: '', // Will be generated by Firestore
      patientId: 'patient_123',
      deviceId: 'apple_watch_456',
      heartRate: 78.0,
      bloodPressureSystolic: 120.0,
      bloodPressureDiastolic: 80.0,
      oxygenSaturation: 98.5,
      temperature: 98.6,
      respiratoryRate: 16.0,
      source: VitalsSource.appleHealth,
      accuracy: 0.95,
      timestamp: DateTime.now(),
      isValidated: true,
    );

    // Create device quality data
    final deviceQuality = DeviceDataQuality(
      overallAccuracy: 0.95,
      isValidated: true,
      batteryLevel: 85.0,
      signalStrength: 0.9,
      dataQualityScore: 0.88,
      calibrationStatus: 'CALIBRATED',
      sensorAccuracy: {
        'heartRate': 0.95,
        'bloodPressure': 0.92,
        'oxygenSaturation': 0.97,
      },
      connectionStability: 0.98,
      lastCalibration: DateTime.now().subtract(Duration(days: 15)),
    );

    try {
      // Store vitals with device quality tracking
      final vitalsId = await _firestoreService.storePatientVitalsWithDevice(
        vitals,
        deviceQuality,
      );
      print('‚úÖ Patient vitals stored with device quality tracking: $vitalsId');

      // Validate device data quality
      final isQualityGood = await _firestoreService.validateDeviceDataQuality(
        'apple_watch_456',
        vitals,
      );
      print(
        'üìä Device data quality validation: ${isQualityGood ? "GOOD" : "POOR"}',
      );
    } catch (e) {
      print('‚ùå Error storing patient vitals: $e');
    }
  }

  /// Example 2: Store triage results with AI reasoning and confidence scores
  Future<void> storeTriageResultExample() async {
    print('\n=== Example 2: Store Triage Results with AI Reasoning ===');

    final triageResult = TriageResultFirestore(
      id: '', // Will be generated by Firestore
      patientId: 'patient_123',
      sessionId: 'session_789',
      symptoms: 'Chest pain, shortness of breath, dizziness',
      severityScore: 7.5,
      urgencyLevel: UrgencyLevel.urgent,
      aiReasoning:
          'Patient presents with cardiac symptoms including chest pain and shortness of breath. '
          'Combined with elevated heart rate from vitals data, this suggests potential cardiac event. '
          'Immediate medical attention recommended.',
      recommendedActions: [
        'Immediate transport to nearest cardiac center',
        'Administer oxygen if available',
        'Monitor vital signs continuously',
        'Prepare for potential cardiac intervention',
      ],
      vitalsContribution: 0.75, // 75% of assessment based on vitals
      confidence: 0.89, // 89% confidence in assessment
      recommendedHospitalId: 'hospital_456',
      estimatedWaitTime: 15.0, // 15 minutes
      createdAt: DateTime.now(),
      geminiModelVersion: 'gemini-1.5-pro',
    );

    try {
      final resultId = await _firestoreService.storeTriageResult(triageResult);
      print('‚úÖ Triage result stored: $resultId');
      print(
        'ü§ñ AI Confidence: ${(triageResult.confidence * 100).toStringAsFixed(1)}%',
      );
      print(
        'üìà Vitals Contribution: ${(triageResult.vitalsContribution * 100).toStringAsFixed(1)}%',
      );
      print('‚ö†Ô∏è  Urgency Level: ${triageResult.urgencyLevel.displayName}');
    } catch (e) {
      print('‚ùå Error storing triage result: $e');
    }
  }

  /// Example 3: Store patient consent with blockchain transaction ID and audit trail
  Future<void> storePatientConsentWithAuditExample() async {
    print(
      '\n=== Example 3: Store Patient Consent with Blockchain & Audit Trail ===',
    );

    final consent = PatientConsentFirestore(
      id: '', // Will be generated by Firestore
      patientId: 'patient_123',
      providerId: 'provider_789',
      consentType: ConsentType.emergency,
      dataScopes: [
        'vitals_access',
        'medical_history',
        'emergency_contact',
        'treatment_authorization',
      ],
      grantedAt: DateTime.now(),
      expiresAt: DateTime.now().add(Duration(days: 365)), // 1 year
      revokedAt: null,
      isActive: true,
      blockchainTxId: '', // Will be set by the method
      ipAddress: '', // Will be set by the method
      consentDetails: {
        'consentMethod': 'digital_signature',
        'witnessPresent': true,
        'emergencyContext': true,
      },
    );

    // Blockchain transaction ID (simulated)
    final blockchainTxId = 'tx_0x1234567890abcdef';

    // Audit details
    final auditDetails = {
      'userId': 'patient_123',
      'userAgent': 'TriageBIOS/1.0 (iOS 17.0)',
      'sessionId': 'session_789',
      'consentMethod': 'biometric_authentication',
      'location': 'Emergency Department',
      'witnessId': 'nurse_456',
    };

    try {
      final consentId = await _firestoreService.storePatientConsentWithAudit(
        consent,
        blockchainTxId,
        '192.168.1.100',
        auditDetails,
      );
      print('‚úÖ Patient consent stored with audit trail: $consentId');
      print('üîó Blockchain Transaction: $blockchainTxId');
      print('üìã Data Scopes: ${consent.dataScopes.join(", ")}');
      print(
        '‚è∞ Expires: ${consent.expiresAt?.toLocal().toString().split('.')[0]}',
      );
    } catch (e) {
      print('‚ùå Error storing patient consent: $e');
    }
  }

  /// Example 4: Retrieve comprehensive patient history with filtering
  Future<void> getPatientHistoryExample() async {
    print('\n=== Example 4: Retrieve Patient History with Filtering ===');

    try {
      // Get comprehensive patient history
      final history = await _firestoreService.getPatientHistory(
        'patient_123',
        startDate: DateTime.now().subtract(Duration(days: 30)), // Last 30 days
        endDate: DateTime.now(),
        severityFilter: null, // All severity levels
        hospitalId: null, // All hospitals
        vitalsLimit: 20,
        triageLimit: 10,
        consentsLimit: 5,
      );

      print('üìä Patient History Summary:');
      print('   Patient ID: ${history.patientId}');
      print('   Vitals Records: ${history.vitals.length}');
      print('   Triage Results: ${history.triageResults.length}');
      print('   Consents: ${history.consents.length}');
      print('   Active Consents: ${history.activeConsents.length}');
      print('   Has Critical Cases: ${history.hasCriticalCases}');
      print(
        '   Average Severity Score: ${history.averageSeverityScore.toStringAsFixed(2)}',
      );
      print('   Vitals Trend: ${history.vitalsTrend.displayName}');

      // Show latest vitals if available
      if (history.latestVitals != null) {
        final latest = history.latestVitals!;
        print(
          '\nü©∫ Latest Vitals (${latest.timestamp.toLocal().toString().split('.')[0]}):',
        );
        print('   Heart Rate: ${latest.heartRate ?? "N/A"} bpm');
        print(
          '   Blood Pressure: ${latest.bloodPressureSystolic ?? "N/A"}/${latest.bloodPressureDiastolic ?? "N/A"} mmHg',
        );
        print('   Oxygen Saturation: ${latest.oxygenSaturation ?? "N/A"}%');
        print('   Temperature: ${latest.temperature ?? "N/A"}¬∞F');
        print(
          '   Severity Score: ${latest.vitalsSeverityScore.toStringAsFixed(2)}',
        );
        print('   Abnormal Vitals: ${latest.hasAbnormalVitals ? "YES" : "NO"}');
      }

      // Show latest triage result if available
      if (history.latestTriageResult != null) {
        final latest = history.latestTriageResult!;
        print(
          '\nüö® Latest Triage (${latest.createdAt.toLocal().toString().split('.')[0]}):',
        );
        print('   Urgency: ${latest.urgencyLevel.displayName}');
        print(
          '   Severity Score: ${latest.severityScore.toStringAsFixed(1)}/10',
        );
        print(
          '   Confidence: ${(latest.confidence * 100).toStringAsFixed(1)}%',
        );
        print('   Symptoms: ${latest.symptoms}');
        if (latest.recommendedHospitalId != null) {
          print('   Recommended Hospital: ${latest.recommendedHospitalId}');
        }
      }
    } catch (e) {
      print('‚ùå Error retrieving patient history: $e');
    }
  }

  /// Example 5: Get device quality history and alerts
  Future<void> getDeviceQualityHistoryExample() async {
    print('\n=== Example 5: Device Quality History and Monitoring ===');

    try {
      // Get device quality history
      final qualityHistory = await _firestoreService.getDeviceQualityHistory(
        'patient_123',
        deviceId: 'apple_watch_456',
        limit: 10,
      );

      print('üì± Device Quality History (${qualityHistory.length} records):');
      for (final log in qualityHistory.take(3)) {
        print('   ${log.timestamp.toLocal().toString().split('.')[0]}:');
        print('     Battery: ${log.batteryLevel?.toStringAsFixed(1) ?? "N/A"}%');
        print('     Signal: ${log.signalStrength != null ? (log.signalStrength! * 100).toStringAsFixed(1) : "N/A"}%');
        print(
          '     Quality Score: ${(log.dataQualityScore * 100).toStringAsFixed(1)}%',
        );
        print('     Calibration: ${log.calibrationStatus}');
      }

      // Get consent audit trail example
      print('\nüìã Consent Audit Trail:');
      final auditLogs = await _firestoreService.getConsentAuditTrail(
        'consent_123',
        limit: 5,
      );

      for (final log in auditLogs) {
        print(
          '   ${log.timestamp.toLocal().toString().split('.')[0]}: ${log.action}',
        );
        print('     Blockchain TX: ${log.blockchainTxId}');
        print('     IP Address: ${log.ipAddress}');
      }
    } catch (e) {
      print('‚ùå Error retrieving device quality history: $e');
    }
  }

  /// Run all examples
  Future<void> runAllExamples() async {
    print('üè• Patient Data Persistence Examples - Task 5 Implementation\n');

    await storePatientVitalsWithDeviceExample();
    await storeTriageResultExample();
    await storePatientConsentWithAuditExample();
    await getPatientHistoryExample();
    await getDeviceQualityHistoryExample();

    print('\n‚úÖ All examples completed successfully!');
    print('\nüìã Task 5 Implementation Summary:');
    print(
      '   ‚úÖ Patient vitals storage with device integration and data quality tracking',
    );
    print(
      '   ‚úÖ Triage results persistence with AI reasoning, confidence scores, and hospital recommendations',
    );
    print(
      '   ‚úÖ Patient consent management with blockchain transaction IDs and audit trails',
    );
    print(
      '   ‚úÖ Patient history retrieval with filtering by date range, severity, and hospital',
    );
    print('   ‚úÖ Device quality monitoring and validation');
    print('   ‚úÖ Comprehensive audit logging for compliance');
  }
}

/// Usage example:
/// ```dart
/// final example = PatientDataPersistenceExample();
/// await example.runAllExamples();
/// ```
